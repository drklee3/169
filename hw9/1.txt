Functional programming, while potentially daunting to some, provides benefits in
more performant and correct code. By having immutability and statelessness, it
allows for programs to be easily parallelized across multiple threads or
processes.  With this core idea, functional programming can be applied to
many everyday languages now, including Python and JavaScript. When using
functional styled programming, logic can be abstracted to functions that carry
out smaller tasks, then brought together again with functional collection
methods such as map() and reduce() to make programs both have the benefits
mentioned above and be more concise. An interesting idea in the article was
the ability to create very basic functions and use them together to recreate
complex tasks.  Another was leading on from the previous idea, in that these
basic functions make the code easier to read and follow, all while being
concise.  Additionally, it was interesting that while recursion can make
code more readable, it is important to be aware of the limitations of the
language's interpreter or compiler - particularly due to tail call optimization
to avoid allocating a pointer onto the stack every time a function is called.
If a language, such as JavaScript prior to ES6, doesn't support tail call
optimization, it can be easy to run into stack overflow errors with a large
number of recursions.
